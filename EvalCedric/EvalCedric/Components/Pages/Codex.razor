@page "/codex"
@rendermode InteractiveServer

@using EvalCedric.Data
@using EvalCedric.Models
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Codex des Licornes</PageTitle>

<h1><i class="fas fa-book-open"></i> Codex des Licornes</h1>
<p>Consultez les dossiers de toutes les créatures magiques répertoriées.</p>

<div class="row my-3">
    <div class="col-md-6">
        <div class="input-group">
            <span class="input-group-text" style="background-color: #e9ecef;"><i class="fas fa-search"></i></span>
            <input type="text" class="form-control" placeholder="Rechercher une licorne par son nom..."
                   @bind="SearchTerm" @bind:event="oninput" />
        </div>
    </div>
</div>

@if (filteredUnicorns == null)
{
    <div class="text-center mt-5">
        <div class="spinner-grow" style="color: #9b59b6; width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Invocation en cours...</span>
        </div>
        <p class="mt-3 fs-4" style="color: #8e44ad;">Tissage des rayons de lune pour révéler les licornes...</p>
    </div>
}
else if (!filteredUnicorns.Any())
{
    <div class="alert alert-info text-center" style="background-color: #eaf2f8; border-color: #aed6f1;">
        <h4 class="alert-heading" style="color: #1b4f72;">Le Sanctuaire est silencieux...</h4>
        <p>Aucune licorne ne correspond à votre recherche.</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th></th>
                    <th>ID</th>
                    <th>Nom</th>
                    <th>Race</th>
                    <th>Âge</th>
                    <th>Couleur</th>
                    <th>Habitat</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var unicorn in filteredUnicorns)
                {
                    <tr>
                        <td>
                            <img src="@unicorn.ImageUrl" class="img-thumbnail" alt="Image de @unicorn.Name" style="width: 100px; height: 75px; object-fit: cover;"
                                 onerror="this.onerror=null; this.src='https://placehold.co/100x75/212529/FFF?text=Erreur';" />
                        </td>
                        <td>@unicorn.Id</td>
                        <td><strong>@unicorn.Name</strong></td>
                        <td>
                            <span class="badge" style="background-color: #5a2a99; color: white;">
                                @unicorn.Breed.Name
                            </span>
                        </td>
                        <td>@unicorn.Age ans</td>
                        <td>@unicorn.Color</td>
                        <td>@unicorn.Habitat</td>
                        <td>
                            <button class="btn btn-info btn-sm" @onclick="() => VoirProfil(unicorn.Id)">
                                <i class="fas fa-eye"></i> Voir profil
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    // Liste complète de toutes les licornes, chargée une seule fois.
    private List<Unicorn>? allUnicorns;
    // Liste filtrée, celle qu'on affiche à l'écran.
    private List<Unicorn>? filteredUnicorns;
    // Variable pour stocker le texte de la recherche.
    private string searchTerm = string.Empty;

    // On transforme searchTerm en "propriété" pour automatiquement lancer le filtre à chaque modification.
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterUnicorns();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // On charge toutes les licornes de la base de données.
        allUnicorns = await DbContext.Unicorns
                                      .Include(u => u.Breed)
                                      .ToListAsync();
        // Au début, la liste filtrée est identique à la liste complète.
        filteredUnicorns = allUnicorns;
    }

    private void FilterUnicorns()
    {
        if (allUnicorns == null) return;

        // Si la barre de recherche est vide, on affiche toutes les licornes.
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUnicorns = allUnicorns;
        }
        else
        {
            // Sinon, on filtre la liste "allUnicorns" pour ne garder que celles
            // dont le nom contient le texte de la recherche (insensible à la casse).
            filteredUnicorns = allUnicorns
                .Where(u => u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        // On demande à Blazor de rafraîchir l'affichage.
        StateHasChanged();
    }

    private void VoirProfil(int unicornId)
    {
        NavigationManager.NavigateTo($"/Profil/{unicornId}");
    }
}
